import { Store } from 'redux';
/** All the method for HTTP request */
declare type IHttpMethods = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
declare const generateDynamicEndpoint: (url: string, variables: any) => string;
/** Interface used for all the allowed props used to generate base instance */
interface ICreateBase {
    /** Redux store of your project */
    store: Store;
    /** Base endpoint url of your backend */
    baseApiUrl: string;
    /** Redux Dispatch */
    dispatch: Function;
    /** Custom httpFn: Used when you make http request */
    httpFn: Function;
    /** Middleware functions: executed before/after of every HTTP request. */
    middleware: any;
    /** Name of your redux where you wanted to save data.
     * Can be update later for different HTTP Request.
     */
    reducer: 'string';
    /** Default state for your HTTP Request.
     * Can be update later for different HTTP Request.
     */
    defaultState: any;
    /** Function used to validate the http response. */
    validateHttpResponse: Function;
}
/** Interface used for all the allowed props used to generate api instance */
interface IApiInstance extends ICreateBase {
    /** Endpoint of your HTTP Request */
    endpoint: string;
    /** Redux name where you want to save result of HTTP Request. */
    reduxKey: string;
    /**
     * Different version of action generated automatically.
     */
    action: string;
    /** Unique key from your record
     * can be 'id' or 'parent.child.sub-child' or 'parent[0].child.sub-child'
     */
    key: string;
    /** HTTP Request Method
     * GET | Post | PUT | DELETE
     */
    method: IHttpMethods;
    /** Callback function executed when HTTP Request Succeed. */
    onSuccess: Function;
    /** Callback function executed when HTTP Request Failed. */
    onError: Function;
}
interface IApiListInstance extends IApiInstance {
    /**
     * path to your list
     */
    listPath: string;
}
/** Interface for middleware function */
interface IMiddleware {
    /** Callback function executed before HTTP Request happens
     * return result will be passed and saved to redux
     */
    beforeStart?: Function;
    /** Callback function executed only success of HTTP Request
     * return result will be passed and saved to redux
     */
    afterSuccess?: Function;
    onError?: Function;
    afterUpdate?: Function;
    afterDelete?: Function;
}
/** CreateBase is used to generate Base Instance */
declare class CreateBase {
    store: any;
    dispatch: Function;
    baseApiUrl: string;
    httpFn: Function;
    middleware: IMiddleware;
    reducer: string;
    defaultState: any;
    validateHttpResponse: Function;
    other: any;
    constructor(data: ICreateBase);
    /** Used to create HTTP instance from the Base instance */
    createInstance(data: IApiInstance): API_INSTANCE;
    /** Used to create Listing HTTP instance from the Base instance */
    createListInstance(data: IApiListInstance): LISTING_API_INSTANCE;
}
interface IReduxActions {
    /** <reducerName>_DEFAULT_<yourReduxKey> */
    default: string;
    /** <reducerName>_START_<yourReduxKey> */
    start: string;
    /** <reducerName>_SUCCESS_<yourReduxKey> */
    success: string;
    /** <reducerName>_UPDATE_<yourReduxKey> */
    update: string;
    /** <reducerName>_DELETE_<yourReduxKey> */
    delete: string;
    /** <reducerName>_ERROR_<yourReduxKey> */
    error: string;
}
interface IOtherProps {
    /** Used to refetch data even changing loading to true. */
    refetch?: Boolean;
    /** Used to pass Body of HTTP request. */
    params?: any;
    /** Used to replace dynamic portion of api endpoint
     * /api/v2/user/:id
     * in above ":id" will be replaced with value of id key from the urlParams object.
     */
    urlParams?: any;
    /**
     * HTTP Header
     */
    headers?: any;
}
/** Class used to create HTTP method */
declare class API_INSTANCE {
    store: any;
    dispatch: Function;
    baseApiUrl: string;
    httpFn: Function;
    middleware: IMiddleware;
    reducer: string;
    defaultState: any;
    other: IOtherProps;
    reduxKey: string;
    actions: IReduxActions;
    endpoint: string;
    key: string;
    apiMethod: IHttpMethods;
    onSuccess: Function;
    state: any;
    validateHttpResponse: Function;
    onError: any;
    /** Generate dynamic action with combination of different situation. */
    generateActions(ac: string, reducer: string): void;
    /** Used to get current redux state from the store. */
    getCurrentState(): any;
    constructor({ endpoint, reduxKey, action, key, method, onSuccess, onError, store, dispatch, baseApiUrl, httpFn, defaultState, middleware, reducer, validateHttpResponse }: IApiInstance);
    dispatchErrorEvent(response: any, apiState?: any): any;
    /** Used to fire HTTP request. */
    call(other?: IOtherProps): any;
    /** Used to refetch data without making loading flags to true. */
    refetchAction(other?: {}): void;
}
/**
 *
 * @param {Array} arr
 * @param {Array} deleteArr
 * @param {Object} options
 * @returns will remove record from the arr based on values of deleteArr based on key or callback passed in options
 */
declare const removeRecordsFromArray: (arr: any, deleteArr: any, options: {
    key?: string;
    callback: Function;
}) => {
    result: any;
    deleted: any;
    deletedItems: any;
};
/**
 *
 * @param {Array} array
 * @param {Object} options
 * @returns used to removing duplicate items from array based on key or callback passed in options,
 */
declare const removeDuplicateFromArray: (array: Array<object>, options: {
    key?: string;
    callback?: Function;
    excludeSecond?: Boolean;
}) => {
    result: unknown[];
    duplicates: number;
};
/** It contain all the feature from API_INSTANCE with additional method to delete and update records from the list in redux. */
declare class LISTING_API_INSTANCE extends API_INSTANCE {
    listPath: string;
    constructor(data: IApiListInstance);
    updateAction(data: Array<any> | any): void;
    deleteAction(id: string[] | string | number): void;
}
/** This method is used to register dynamic action which is being call from all the instances. */
declare const bindReducer: (reducer: (state: any, action: 'string', ...other: any[]) => {}, config: {
    key: '';
}) => any;
/** Used to get current state of the HTTP request where detail will be store */
declare const useInstance: (instance: IApiInstance) => any;
interface IAIEvents {
    onStart?: Function;
    onSuccess?: Function;
    onError?: Function;
    onUpdate?: Function;
    onDelete?: Function;
}
declare const useAIEventHandler: (instance: IApiInstance, events: IAIEvents) => null;
export { CreateBase, API_INSTANCE, generateDynamicEndpoint, removeRecordsFromArray, removeDuplicateFromArray, bindReducer, useInstance, useAIEventHandler };
