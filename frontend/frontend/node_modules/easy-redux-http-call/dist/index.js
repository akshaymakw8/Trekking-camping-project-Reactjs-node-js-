var react = require('react');
var reactRedux = require('react-redux');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var _excluded = ["endpoint", "method", "params", "headers"],
  _excluded2 = ["store", "baseApiUrl", "httpFn", "middleware", "reducer", "defaultState", "validateHttpResponse"];
var generateDynamicEndpoint = function generateDynamicEndpoint(url, variables) {
  Object.keys(variables || {}).map(function (i) {
    url = url.replace("{" + i + "}", variables[i]);
  });
  return url;
};
var defaultHttpFn = function defaultHttpFn(_ref) {
  var endpoint = _ref.endpoint,
    method = _ref.method,
    params = _ref.params,
    headers = _ref.headers,
    other = _objectWithoutPropertiesLoose(_ref, _excluded);
  var parseMethod = (method || 'get').toLowerCase();
  if (parseMethod === 'get' && typeof params === 'object') {
    var urlParams = new URLSearchParams(params);
    endpoint += "?" + urlParams.toString();
  }
  return window.fetch(endpoint, _extends({
    method: parseMethod,
    headers: headers || {}
  }, parseMethod !== 'get' && {
    body: params || {}
  }, other || {})).then(function (res) {
    try {
      return Promise.resolve(res.json()).then(function (data) {
        return {
          status: res.status,
          data: data
        };
      });
    } catch (e) {
      return Promise.reject(e);
    }
  });
};
var makeHttpCall = function makeHttpCall(context, params) {
  if (context.httpFn) {
    return context.httpFn(params);
  } else {
    return defaultHttpFn(params);
  }
};
var CreateBase = /*#__PURE__*/function () {
  function CreateBase(data) {
    var store = data.store,
      baseApiUrl = data.baseApiUrl,
      httpFn = data.httpFn,
      middleware = data.middleware,
      reducer = data.reducer,
      defaultState = data.defaultState,
      validateHttpResponse = data.validateHttpResponse,
      other = _objectWithoutPropertiesLoose(data, _excluded2);
    this.store = store;
    this.dispatch = store.dispatch;
    this.baseApiUrl = baseApiUrl || '';
    this.httpFn = httpFn;
    this.middleware = middleware;
    this.reducer = reducer;
    this.defaultState = defaultState;
    this.validateHttpResponse = validateHttpResponse;
    this.other = other;
  }
  var _proto = CreateBase.prototype;
  _proto.createInstance = function createInstance(data) {
    return new API_INSTANCE(_extends({}, this.other, data, {
      store: data.store || this.store,
      dispatch: data.dispatch || this.dispatch,
      baseApiUrl: data.baseApiUrl || this.baseApiUrl || '',
      httpFn: data.httpFn || this.httpFn,
      defaultState: data.defaultState || this.defaultState,
      validateHttpResponse: data.validateHttpResponse || this.validateHttpResponse
    }));
  };
  _proto.createListInstance = function createListInstance(data) {
    return new LISTING_API_INSTANCE(_extends({}, this.other, data, {
      store: data.store || this.store,
      dispatch: data.dispatch || this.dispatch,
      baseApiUrl: data.baseApiUrl || this.baseApiUrl || '',
      httpFn: data.httpFn || this.httpFn,
      defaultState: data.defaultState || this.defaultState,
      validateHttpResponse: data.validateHttpResponse || this.validateHttpResponse,
      listPath: data.listPath
    }));
  };
  return CreateBase;
}();
var API_INSTANCE = /*#__PURE__*/function () {
  function API_INSTANCE(_ref2) {
    var endpoint = _ref2.endpoint,
      reduxKey = _ref2.reduxKey,
      action = _ref2.action,
      key = _ref2.key,
      method = _ref2.method,
      onSuccess = _ref2.onSuccess,
      onError = _ref2.onError,
      store = _ref2.store,
      dispatch = _ref2.dispatch,
      baseApiUrl = _ref2.baseApiUrl,
      httpFn = _ref2.httpFn,
      defaultState = _ref2.defaultState,
      middleware = _ref2.middleware,
      reducer = _ref2.reducer,
      validateHttpResponse = _ref2.validateHttpResponse;
    this.store = store;
    this.dispatch = dispatch;
    this.baseApiUrl = baseApiUrl;
    this.httpFn = httpFn;
    this.defaultState = defaultState;
    this.middleware = middleware;
    this.reducer = reducer;
    this.generateActions(action, reducer);
    this.reduxKey = reduxKey;
    this.endpoint = endpoint;
    this.key = key;
    this.apiMethod = method || 'GET';
    this.onSuccess = onSuccess;
    this.onError = onError;
    this.validateHttpResponse = validateHttpResponse;
  }
  var _proto2 = API_INSTANCE.prototype;
  _proto2.generateActions = function generateActions(ac, reducer) {
    this.actions = {
      "default": reducer + "_default_" + ac,
      start: reducer + "_START_" + ac,
      success: reducer + "_SUCCESS_" + ac,
      update: reducer + "_UPDATE_" + ac,
      "delete": reducer + "_DELETE_" + ac,
      error: reducer + "_ERROR_" + ac
    };
  };
  _proto2.getCurrentState = function getCurrentState() {
    var _this$store$getState, _this$store$getState$;
    var state = (_this$store$getState = this.store.getState()) === null || _this$store$getState === void 0 ? void 0 : (_this$store$getState$ = _this$store$getState[this.reducer]) === null || _this$store$getState$ === void 0 ? void 0 : _this$store$getState$[this.reduxKey];
    if (state) {
      return JSON.parse(JSON.stringify(state));
    }
    return state;
  };
  _proto2.dispatchErrorEvent = function dispatchErrorEvent(response, apiState) {
    var _this$middleware;
    if (apiState === void 0) {
      apiState = {};
    }
    var onErrorResponse = response;
    if (typeof this.onError === 'function') {
      var cbPayload = this.onError(response, apiState);
      if (cbPayload !== undefined) {
        onErrorResponse = cbPayload;
      }
    }
    onErrorResponse = {
      loading: false,
      error: onErrorResponse,
      event: 'error'
    };
    if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware = this.middleware) === null || _this$middleware === void 0 ? void 0 : _this$middleware.onError) === 'function') {
      var _this$middleware2;
      var _cbPayload = (_this$middleware2 = this.middleware) === null || _this$middleware2 === void 0 ? void 0 : _this$middleware2.onError({
        currentState: this.getCurrentState(),
        instance: this,
        response: onErrorResponse,
        event: 'error'
      }, apiState);
      if (_cbPayload !== undefined) {
        onErrorResponse = _cbPayload;
      }
    }
    this.dispatch({
      type: this.actions.error,
      key: this.reduxKey || 'unknown',
      payload: onErrorResponse,
      event: 'error'
    });
    return onErrorResponse;
  };
  _proto2.call = function call(other) {
    var _this = this;
    var _this$middleware3,
      _this2 = this;
    if (other === void 0) {
      other = {
        refetch: false,
        params: {},
        urlParams: {},
        headers: {}
      };
    }
    var startActionPayload = _extends({}, this.getCurrentState(), !other.refetch && {
      loading: true
    }, {
      error: {},
      event: 'start'
    });
    if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware3 = this.middleware) === null || _this$middleware3 === void 0 ? void 0 : _this$middleware3.beforeStart) === 'function') {
      startActionPayload = this.middleware.beforeStart({
        currentState: this.getCurrentState(),
        instance: this,
        params: other.params,
        urlParams: other.urlParams,
        event: 'start'
      }, other);
    }
    this.dispatch({
      type: this.actions.start,
      key: this.reduxKey || '',
      payload: startActionPayload,
      event: 'start'
    });
    try {
      var apiState = _extends({
        endpoint: generateDynamicEndpoint(getMergedEndpoint(this.baseApiUrl, this.endpoint), other.urlParams || {}),
        method: this.apiMethod,
        headers: other.headers
      }, other.params && {
        params: other.params
      });
      var apiPromise = makeHttpCall(this, apiState);
      apiPromise.then(function (_ref3) {
        var response = _ref3.data,
          _ref3$status = _ref3.status,
          status = _ref3$status === void 0 ? 200 : _ref3$status;
        try {
          var _this$middleware4;
          var isValidResponse = true;
          if (_this.validateHttpResponse) {
            var cbValidateResponse = _this.validateHttpResponse(response);
            if (!cbValidateResponse) {
              isValidResponse = false;
            }
          } else if (status > 299) {
            isValidResponse = false;
            return Promise.resolve(response);
          }
          if (!isValidResponse) {
            return Promise.resolve(_this.dispatchErrorEvent(response, other));
          }
          if (typeof _this.onSuccess === 'function') {
            var onSuccessResult = _this.onSuccess(response, _extends({}, apiState, other));
            if (onSuccessResult !== undefined) {
              response = onSuccessResult;
            }
          }
          var newPayload = _extends({}, _this.getCurrentState(), {
            loading: false,
            data: response,
            event: 'success'
          });
          if (typeof (_this === null || _this === void 0 ? void 0 : (_this$middleware4 = _this.middleware) === null || _this$middleware4 === void 0 ? void 0 : _this$middleware4.afterSuccess) === 'function') {
            var _this$middleware5;
            var cbPayload = (_this$middleware5 = _this.middleware) === null || _this$middleware5 === void 0 ? void 0 : _this$middleware5.afterSuccess({
              currentState: _this.getCurrentState(),
              instance: _this,
              response: response,
              event: 'success'
            }, _extends({}, apiState, other));
            if (cbPayload !== undefined) {
              newPayload = cbPayload;
            }
          }
          _this.dispatch({
            type: _this.actions.success,
            key: _this.reduxKey || 'unknown',
            payload: newPayload,
            event: 'success'
          });
          return Promise.resolve(response);
        } catch (e) {
          return Promise.reject(e);
        }
      })["catch"](function (error) {
        return _this2.dispatchErrorEvent(error, _extends({}, other, apiState));
      });
    } catch (error) {
      return this.dispatchErrorEvent(error, _extends({}, other));
    }
  };
  _proto2.refetchAction = function refetchAction(other) {
    if (other === void 0) {
      other = {};
    }
    this.call(_extends({}, other, {
      refetch: true
    }));
  };
  return API_INSTANCE;
}();
var getValueFromPath = function getValueFromPath(data, path) {
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');
  var a = path.split('.');
  for (var i = 0, n = a.length; i < n; ++i) {
    var k = a[i];
    if (k in data) {
      data = data[k];
    } else {
      return undefined;
    }
  }
  return data;
};
var setValueFromPath = function setValueFromPath(data, path, value) {
  path = path.replace(/\[(\w+)\]/g, '.$1');
  path = path.replace(/^\./, '');
  var a = path.split('.');
  var o = data;
  while (a.length - 1) {
    var n = a.shift();
    if (!(n in o)) o[n] = {};
    o = o[n];
  }
  o[a[0]] = value;
};
var getMergedEndpoint = function getMergedEndpoint(baseApiUrl, endpoint) {
  if (!baseApiUrl) return endpoint;
  if (endpoint[0] === '/') {
    return baseApiUrl + endpoint;
  }
  return endpoint;
};
var removeRecordsFromArray = function removeRecordsFromArray(arr, deleteArr, options) {
  if (arr === void 0) {
    arr = [];
  }
  var _options$key = options.key,
    key = _options$key === void 0 ? '' : _options$key,
    callback = options.callback;
  var deletedFullArray = [];
  arr = arr.filter(function (item) {
    var id = callback ? callback(item) : item[key];
    if (deleteArr.includes(id)) {
      deletedFullArray.push(item);
      return false;
    } else {
      return true;
    }
  });
  return {
    result: arr,
    deleted: deletedFullArray.length,
    deletedItems: deletedFullArray
  };
};
var removeDuplicateFromArray = function removeDuplicateFromArray(array, options) {
  var key = options.key,
    callback = options.callback,
    _options$excludeSecon = options.excludeSecond,
    excludeSecond = _options$excludeSecon === void 0 ? false : _options$excludeSecon;
  var newList = {};
  var duplicates = 0;
  array.forEach(function (item) {
    var id = callback ? callback(item) : key ? item[key] : '';
    id = id + 'p';
    if (newList[id]) {
      duplicates++;
      if (excludeSecond === false) {
        newList[id] = item;
      }
    } else {
      newList[id] = item;
    }
  });
  return {
    result: Object.values(newList || {}),
    duplicates: duplicates
  };
};
var LISTING_API_INSTANCE = /*#__PURE__*/function (_API_INSTANCE) {
  _inheritsLoose(LISTING_API_INSTANCE, _API_INSTANCE);
  function LISTING_API_INSTANCE(data) {
    var _this3;
    _this3 = _API_INSTANCE.call(this, data) || this;
    _this3.listPath = data.listPath;
    return _this3;
  }
  var _proto3 = LISTING_API_INSTANCE.prototype;
  _proto3.updateAction = function updateAction(data) {
    try {
      var _this$middleware6;
      var state = this.getCurrentState();
      var listFromPath = [];
      if (this.listPath) {
        var pathValue = getValueFromPath(state, this.listPath);
        if (!listFromPath) {
          listFromPath = [];
        } else if (!Array.isArray(pathValue)) {
          throw new Error('listPath should be path to array state');
        } else {
          listFromPath = pathValue;
        }
      } else if (!Array.isArray(state.data)) {
        throw new Error('data should be array state. if your list is not in data state then you need to pass listPath in instance');
      }
      var list = [].concat(this.listPath ? getValueFromPath(state, this.listPath) : state.data);
      var result = removeDuplicateFromArray([].concat(list, Array.isArray(data) ? data : [data]), {
        key: this.key
      });
      if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware6 = this.middleware) === null || _this$middleware6 === void 0 ? void 0 : _this$middleware6.afterUpdate) === 'function') {
        state = this.middleware.afterUpdate({
          currentState: this.getCurrentState(),
          instance: this,
          updateData: result
        });
      } else if (this.listPath) {
        setValueFromPath(state, this.listPath, Object.values(result.result || {}));
      } else {
        state.data = Object.values(result.result || {});
      }
      this.dispatch({
        type: this.actions.update,
        key: this.reduxKey,
        payload: _extends({}, this.getCurrentState(), state, {
          event: 'update'
        }),
        event: 'update'
      });
    } catch (error) {
      showErrorMessage(error);
    }
  };
  _proto3.deleteAction = function deleteAction(id) {
    var _this4 = this;
    try {
      var _this$middleware7;
      var state = this.getCurrentState();
      var listFromPath = [];
      if (this.listPath) {
        var pathValue = getValueFromPath(state, this.listPath);
        if (!listFromPath) {
          listFromPath = [];
        } else if (!Array.isArray(pathValue)) {
          throw new Error('listPath should be path to array state');
        } else {
          listFromPath = pathValue;
        }
      } else if (!Array.isArray(state.data)) {
        throw new Error('data should be array state. if your list is not in data state then you need to pass listPath in instance');
      }
      var list = [].concat(this.listPath ? getValueFromPath(state, this.listPath) : state.data);
      var deleteData = removeRecordsFromArray(list, Array.isArray(id) ? id : [id], {
        callback: function callback(i) {
          return getValueFromPath(i, _this4.key || '');
        }
      });
      if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware7 = this.middleware) === null || _this$middleware7 === void 0 ? void 0 : _this$middleware7.afterDelete) === 'function') {
        state = this.middleware.afterDelete({
          currentState: this.getCurrentState(),
          instance: this,
          deleteData: deleteData
        });
      } else if (this.listPath) {
        setValueFromPath(state, this.listPath, deleteData.result);
      } else {
        state.data = deleteData.result;
      }
      this.dispatch({
        type: this.actions["delete"],
        key: this.reduxKey,
        payload: _extends({}, this.getCurrentState(), state, {
          event: 'delete'
        }),
        event: 'delete'
      });
    } catch (error) {
      showErrorMessage(error);
    }
  };
  return LISTING_API_INSTANCE;
}(API_INSTANCE);
var showErrorMessage = function showErrorMessage(message) {
  console.log("%c " + message.message + " ", ' font-size: 12px; color: #bada55; background: #222;', message);
};
var bindReducer = function bindReducer(reducer, config) {
  var path = config.key + '_';
  return function (state, action) {
    if (action.type.includes(path)) {
      var _extends2;
      return _extends({}, state, (_extends2 = {}, _extends2[action.key] = _extends({}, action.payload || {}, action.event && {
        event: action.event
      }), _extends2));
    } else {
      for (var _len = arguments.length, other = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        other[_key - 2] = arguments[_key];
      }
      return reducer.apply(void 0, [state, action].concat(other));
    }
  };
};
var useInstance = function useInstance(instance) {
  var currentState = reactRedux.useSelector(function (state) {
    var _state$instance$reduc;
    return state === null || state === void 0 ? void 0 : (_state$instance$reduc = state[instance.reducer]) === null || _state$instance$reduc === void 0 ? void 0 : _state$instance$reduc[instance.reduxKey];
  });
  var memoedState = react.useMemo(function () {
    var state = currentState || instance.defaultState;
    state = JSON.parse(JSON.stringify(state));
    return state;
  }, [currentState]);
  return memoedState;
};
var useAIEventHandler = function useAIEventHandler(instance, events) {
  var isComponentLoaded = react.useRef(false);
  var state = useInstance(instance);
  react.useEffect(function () {
    if (isComponentLoaded.current) {
      if (state.loading === true && state.event === 'start') {
        events.onStart && events.onStart(state);
      }
      if (state.loading === false && state.data && state.event === 'success') {
        events.onSuccess && events.onSuccess(state);
      }
      if (state.loading === false && state.error && state.event === 'error') {
        events.onError && events.onError(state);
      }
      if (state.loading === false && state.event === 'update') {
        events.onUpdate && events.onUpdate(state);
      }
      if (state.loading === false && state.event === 'delete') {
        events.onUpdate && events.onUpdate(state);
      }
    }
    if (!isComponentLoaded.current) {
      isComponentLoaded.current = true;
    }
  }, [state]);
  return null;
};

exports.API_INSTANCE = API_INSTANCE;
exports.CreateBase = CreateBase;
exports.bindReducer = bindReducer;
exports.generateDynamicEndpoint = generateDynamicEndpoint;
exports.removeDuplicateFromArray = removeDuplicateFromArray;
exports.removeRecordsFromArray = removeRecordsFromArray;
exports.useAIEventHandler = useAIEventHandler;
exports.useInstance = useInstance;
//# sourceMappingURL=index.js.map
