{"ast":null,"code":"import { useMemo, useRef, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar _excluded = [\"endpoint\", \"method\", \"params\", \"headers\"],\n  _excluded2 = [\"store\", \"baseApiUrl\", \"httpFn\", \"middleware\", \"reducer\", \"defaultState\", \"validateHttpResponse\"];\nvar generateDynamicEndpoint = function generateDynamicEndpoint(url, variables) {\n  Object.keys(variables || {}).map(function (i) {\n    url = url.replace(\"{\" + i + \"}\", variables[i]);\n  });\n  return url;\n};\nvar defaultHttpFn = function defaultHttpFn(_ref) {\n  var endpoint = _ref.endpoint,\n    method = _ref.method,\n    params = _ref.params,\n    headers = _ref.headers,\n    other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var parseMethod = (method || 'get').toLowerCase();\n  if (parseMethod === 'get' && typeof params === 'object') {\n    var urlParams = new URLSearchParams(params);\n    endpoint += \"?\" + urlParams.toString();\n  }\n  return window.fetch(endpoint, _extends({\n    method: parseMethod,\n    headers: headers || {}\n  }, parseMethod !== 'get' && {\n    body: params || {}\n  }, other || {})).then(function (res) {\n    try {\n      return Promise.resolve(res.json()).then(function (data) {\n        return {\n          status: res.status,\n          data: data\n        };\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n};\nvar makeHttpCall = function makeHttpCall(context, params) {\n  if (context.httpFn) {\n    return context.httpFn(params);\n  } else {\n    return defaultHttpFn(params);\n  }\n};\nvar CreateBase = /*#__PURE__*/function () {\n  function CreateBase(data) {\n    var store = data.store,\n      baseApiUrl = data.baseApiUrl,\n      httpFn = data.httpFn,\n      middleware = data.middleware,\n      reducer = data.reducer,\n      defaultState = data.defaultState,\n      validateHttpResponse = data.validateHttpResponse,\n      other = _objectWithoutPropertiesLoose(data, _excluded2);\n    this.store = store;\n    this.dispatch = store.dispatch;\n    this.baseApiUrl = baseApiUrl || '';\n    this.httpFn = httpFn;\n    this.middleware = middleware;\n    this.reducer = reducer;\n    this.defaultState = defaultState;\n    this.validateHttpResponse = validateHttpResponse;\n    this.other = other;\n  }\n  var _proto = CreateBase.prototype;\n  _proto.createInstance = function createInstance(data) {\n    return new API_INSTANCE(_extends({}, this.other, data, {\n      store: data.store || this.store,\n      dispatch: data.dispatch || this.dispatch,\n      baseApiUrl: data.baseApiUrl || this.baseApiUrl || '',\n      httpFn: data.httpFn || this.httpFn,\n      defaultState: data.defaultState || this.defaultState,\n      validateHttpResponse: data.validateHttpResponse || this.validateHttpResponse\n    }));\n  };\n  _proto.createListInstance = function createListInstance(data) {\n    return new LISTING_API_INSTANCE(_extends({}, this.other, data, {\n      store: data.store || this.store,\n      dispatch: data.dispatch || this.dispatch,\n      baseApiUrl: data.baseApiUrl || this.baseApiUrl || '',\n      httpFn: data.httpFn || this.httpFn,\n      defaultState: data.defaultState || this.defaultState,\n      validateHttpResponse: data.validateHttpResponse || this.validateHttpResponse,\n      listPath: data.listPath\n    }));\n  };\n  return CreateBase;\n}();\nvar API_INSTANCE = /*#__PURE__*/function () {\n  function API_INSTANCE(_ref2) {\n    var endpoint = _ref2.endpoint,\n      reduxKey = _ref2.reduxKey,\n      action = _ref2.action,\n      key = _ref2.key,\n      method = _ref2.method,\n      onSuccess = _ref2.onSuccess,\n      onError = _ref2.onError,\n      store = _ref2.store,\n      dispatch = _ref2.dispatch,\n      baseApiUrl = _ref2.baseApiUrl,\n      httpFn = _ref2.httpFn,\n      defaultState = _ref2.defaultState,\n      middleware = _ref2.middleware,\n      reducer = _ref2.reducer,\n      validateHttpResponse = _ref2.validateHttpResponse;\n    this.store = store;\n    this.dispatch = dispatch;\n    this.baseApiUrl = baseApiUrl;\n    this.httpFn = httpFn;\n    this.defaultState = defaultState;\n    this.middleware = middleware;\n    this.reducer = reducer;\n    this.generateActions(action, reducer);\n    this.reduxKey = reduxKey;\n    this.endpoint = endpoint;\n    this.key = key;\n    this.apiMethod = method || 'GET';\n    this.onSuccess = onSuccess;\n    this.onError = onError;\n    this.validateHttpResponse = validateHttpResponse;\n  }\n  var _proto2 = API_INSTANCE.prototype;\n  _proto2.generateActions = function generateActions(ac, reducer) {\n    this.actions = {\n      \"default\": reducer + \"_default_\" + ac,\n      start: reducer + \"_START_\" + ac,\n      success: reducer + \"_SUCCESS_\" + ac,\n      update: reducer + \"_UPDATE_\" + ac,\n      \"delete\": reducer + \"_DELETE_\" + ac,\n      error: reducer + \"_ERROR_\" + ac\n    };\n  };\n  _proto2.getCurrentState = function getCurrentState() {\n    var _this$store$getState, _this$store$getState$;\n    var state = (_this$store$getState = this.store.getState()) === null || _this$store$getState === void 0 ? void 0 : (_this$store$getState$ = _this$store$getState[this.reducer]) === null || _this$store$getState$ === void 0 ? void 0 : _this$store$getState$[this.reduxKey];\n    if (state) {\n      return JSON.parse(JSON.stringify(state));\n    }\n    return state;\n  };\n  _proto2.dispatchErrorEvent = function dispatchErrorEvent(response, apiState) {\n    var _this$middleware;\n    if (apiState === void 0) {\n      apiState = {};\n    }\n    var onErrorResponse = response;\n    if (typeof this.onError === 'function') {\n      var cbPayload = this.onError(response, apiState);\n      if (cbPayload !== undefined) {\n        onErrorResponse = cbPayload;\n      }\n    }\n    onErrorResponse = {\n      loading: false,\n      error: onErrorResponse,\n      event: 'error'\n    };\n    if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware = this.middleware) === null || _this$middleware === void 0 ? void 0 : _this$middleware.onError) === 'function') {\n      var _this$middleware2;\n      var _cbPayload = (_this$middleware2 = this.middleware) === null || _this$middleware2 === void 0 ? void 0 : _this$middleware2.onError({\n        currentState: this.getCurrentState(),\n        instance: this,\n        response: onErrorResponse,\n        event: 'error'\n      }, apiState);\n      if (_cbPayload !== undefined) {\n        onErrorResponse = _cbPayload;\n      }\n    }\n    this.dispatch({\n      type: this.actions.error,\n      key: this.reduxKey || 'unknown',\n      payload: onErrorResponse,\n      event: 'error'\n    });\n    return onErrorResponse;\n  };\n  _proto2.call = function call(other) {\n    var _this = this;\n    var _this$middleware3,\n      _this2 = this;\n    if (other === void 0) {\n      other = {\n        refetch: false,\n        params: {},\n        urlParams: {},\n        headers: {}\n      };\n    }\n    var startActionPayload = _extends({}, this.getCurrentState(), !other.refetch && {\n      loading: true\n    }, {\n      error: {},\n      event: 'start'\n    });\n    if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware3 = this.middleware) === null || _this$middleware3 === void 0 ? void 0 : _this$middleware3.beforeStart) === 'function') {\n      startActionPayload = this.middleware.beforeStart({\n        currentState: this.getCurrentState(),\n        instance: this,\n        params: other.params,\n        urlParams: other.urlParams,\n        event: 'start'\n      }, other);\n    }\n    this.dispatch({\n      type: this.actions.start,\n      key: this.reduxKey || '',\n      payload: startActionPayload,\n      event: 'start'\n    });\n    try {\n      var apiState = _extends({\n        endpoint: generateDynamicEndpoint(getMergedEndpoint(this.baseApiUrl, this.endpoint), other.urlParams || {}),\n        method: this.apiMethod,\n        headers: other.headers\n      }, other.params && {\n        params: other.params\n      });\n      var apiPromise = makeHttpCall(this, apiState);\n      apiPromise.then(function (_ref3) {\n        var response = _ref3.data,\n          _ref3$status = _ref3.status,\n          status = _ref3$status === void 0 ? 200 : _ref3$status;\n        try {\n          var _this$middleware4;\n          var isValidResponse = true;\n          if (_this.validateHttpResponse) {\n            var cbValidateResponse = _this.validateHttpResponse(response);\n            if (!cbValidateResponse) {\n              isValidResponse = false;\n            }\n          } else if (status > 299) {\n            isValidResponse = false;\n            return Promise.resolve(response);\n          }\n          if (!isValidResponse) {\n            return Promise.resolve(_this.dispatchErrorEvent(response, other));\n          }\n          if (typeof _this.onSuccess === 'function') {\n            var onSuccessResult = _this.onSuccess(response, _extends({}, apiState, other));\n            if (onSuccessResult !== undefined) {\n              response = onSuccessResult;\n            }\n          }\n          var newPayload = _extends({}, _this.getCurrentState(), {\n            loading: false,\n            data: response,\n            event: 'success'\n          });\n          if (typeof (_this === null || _this === void 0 ? void 0 : (_this$middleware4 = _this.middleware) === null || _this$middleware4 === void 0 ? void 0 : _this$middleware4.afterSuccess) === 'function') {\n            var _this$middleware5;\n            var cbPayload = (_this$middleware5 = _this.middleware) === null || _this$middleware5 === void 0 ? void 0 : _this$middleware5.afterSuccess({\n              currentState: _this.getCurrentState(),\n              instance: _this,\n              response: response,\n              event: 'success'\n            }, _extends({}, apiState, other));\n            if (cbPayload !== undefined) {\n              newPayload = cbPayload;\n            }\n          }\n          _this.dispatch({\n            type: _this.actions.success,\n            key: _this.reduxKey || 'unknown',\n            payload: newPayload,\n            event: 'success'\n          });\n          return Promise.resolve(response);\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      })[\"catch\"](function (error) {\n        return _this2.dispatchErrorEvent(error, _extends({}, other, apiState));\n      });\n    } catch (error) {\n      return this.dispatchErrorEvent(error, _extends({}, other));\n    }\n  };\n  _proto2.refetchAction = function refetchAction(other) {\n    if (other === void 0) {\n      other = {};\n    }\n    this.call(_extends({}, other, {\n      refetch: true\n    }));\n  };\n  return API_INSTANCE;\n}();\nvar getValueFromPath = function getValueFromPath(data, path) {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1');\n  path = path.replace(/^\\./, '');\n  var a = path.split('.');\n  for (var i = 0, n = a.length; i < n; ++i) {\n    var k = a[i];\n    if (k in data) {\n      data = data[k];\n    } else {\n      return undefined;\n    }\n  }\n  return data;\n};\nvar setValueFromPath = function setValueFromPath(data, path, value) {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1');\n  path = path.replace(/^\\./, '');\n  var a = path.split('.');\n  var o = data;\n  while (a.length - 1) {\n    var n = a.shift();\n    if (!(n in o)) o[n] = {};\n    o = o[n];\n  }\n  o[a[0]] = value;\n};\nvar getMergedEndpoint = function getMergedEndpoint(baseApiUrl, endpoint) {\n  if (!baseApiUrl) return endpoint;\n  if (endpoint[0] === '/') {\n    return baseApiUrl + endpoint;\n  }\n  return endpoint;\n};\nvar removeRecordsFromArray = function removeRecordsFromArray(arr, deleteArr, options) {\n  if (arr === void 0) {\n    arr = [];\n  }\n  var _options$key = options.key,\n    key = _options$key === void 0 ? '' : _options$key,\n    callback = options.callback;\n  var deletedFullArray = [];\n  arr = arr.filter(function (item) {\n    var id = callback ? callback(item) : item[key];\n    if (deleteArr.includes(id)) {\n      deletedFullArray.push(item);\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return {\n    result: arr,\n    deleted: deletedFullArray.length,\n    deletedItems: deletedFullArray\n  };\n};\nvar removeDuplicateFromArray = function removeDuplicateFromArray(array, options) {\n  var key = options.key,\n    callback = options.callback,\n    _options$excludeSecon = options.excludeSecond,\n    excludeSecond = _options$excludeSecon === void 0 ? false : _options$excludeSecon;\n  var newList = {};\n  var duplicates = 0;\n  array.forEach(function (item) {\n    var id = callback ? callback(item) : key ? item[key] : '';\n    id = id + 'p';\n    if (newList[id]) {\n      duplicates++;\n      if (excludeSecond === false) {\n        newList[id] = item;\n      }\n    } else {\n      newList[id] = item;\n    }\n  });\n  return {\n    result: Object.values(newList || {}),\n    duplicates: duplicates\n  };\n};\nvar LISTING_API_INSTANCE = /*#__PURE__*/function (_API_INSTANCE) {\n  _inheritsLoose(LISTING_API_INSTANCE, _API_INSTANCE);\n  function LISTING_API_INSTANCE(data) {\n    var _this3;\n    _this3 = _API_INSTANCE.call(this, data) || this;\n    _this3.listPath = data.listPath;\n    return _this3;\n  }\n  var _proto3 = LISTING_API_INSTANCE.prototype;\n  _proto3.updateAction = function updateAction(data) {\n    try {\n      var _this$middleware6;\n      var state = this.getCurrentState();\n      var listFromPath = [];\n      if (this.listPath) {\n        var pathValue = getValueFromPath(state, this.listPath);\n        if (!listFromPath) {\n          listFromPath = [];\n        } else if (!Array.isArray(pathValue)) {\n          throw new Error('listPath should be path to array state');\n        } else {\n          listFromPath = pathValue;\n        }\n      } else if (!Array.isArray(state.data)) {\n        throw new Error('data should be array state. if your list is not in data state then you need to pass listPath in instance');\n      }\n      var list = [].concat(this.listPath ? getValueFromPath(state, this.listPath) : state.data);\n      var result = removeDuplicateFromArray([].concat(list, Array.isArray(data) ? data : [data]), {\n        key: this.key\n      });\n      if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware6 = this.middleware) === null || _this$middleware6 === void 0 ? void 0 : _this$middleware6.afterUpdate) === 'function') {\n        state = this.middleware.afterUpdate({\n          currentState: this.getCurrentState(),\n          instance: this,\n          updateData: result\n        });\n      } else if (this.listPath) {\n        setValueFromPath(state, this.listPath, Object.values(result.result || {}));\n      } else {\n        state.data = Object.values(result.result || {});\n      }\n      this.dispatch({\n        type: this.actions.update,\n        key: this.reduxKey,\n        payload: _extends({}, this.getCurrentState(), state, {\n          event: 'update'\n        }),\n        event: 'update'\n      });\n    } catch (error) {\n      showErrorMessage(error);\n    }\n  };\n  _proto3.deleteAction = function deleteAction(id) {\n    var _this4 = this;\n    try {\n      var _this$middleware7;\n      var state = this.getCurrentState();\n      var listFromPath = [];\n      if (this.listPath) {\n        var pathValue = getValueFromPath(state, this.listPath);\n        if (!listFromPath) {\n          listFromPath = [];\n        } else if (!Array.isArray(pathValue)) {\n          throw new Error('listPath should be path to array state');\n        } else {\n          listFromPath = pathValue;\n        }\n      } else if (!Array.isArray(state.data)) {\n        throw new Error('data should be array state. if your list is not in data state then you need to pass listPath in instance');\n      }\n      var list = [].concat(this.listPath ? getValueFromPath(state, this.listPath) : state.data);\n      var deleteData = removeRecordsFromArray(list, Array.isArray(id) ? id : [id], {\n        callback: function callback(i) {\n          return getValueFromPath(i, _this4.key || '');\n        }\n      });\n      if (typeof (this === null || this === void 0 ? void 0 : (_this$middleware7 = this.middleware) === null || _this$middleware7 === void 0 ? void 0 : _this$middleware7.afterDelete) === 'function') {\n        state = this.middleware.afterDelete({\n          currentState: this.getCurrentState(),\n          instance: this,\n          deleteData: deleteData\n        });\n      } else if (this.listPath) {\n        setValueFromPath(state, this.listPath, deleteData.result);\n      } else {\n        state.data = deleteData.result;\n      }\n      this.dispatch({\n        type: this.actions[\"delete\"],\n        key: this.reduxKey,\n        payload: _extends({}, this.getCurrentState(), state, {\n          event: 'delete'\n        }),\n        event: 'delete'\n      });\n    } catch (error) {\n      showErrorMessage(error);\n    }\n  };\n  return LISTING_API_INSTANCE;\n}(API_INSTANCE);\nvar showErrorMessage = function showErrorMessage(message) {\n  console.log(\"%c \" + message.message + \" \", ' font-size: 12px; color: #bada55; background: #222;', message);\n};\nvar bindReducer = function bindReducer(reducer, config) {\n  var path = config.key + '_';\n  return function (state, action) {\n    if (action.type.includes(path)) {\n      var _extends2;\n      return _extends({}, state, (_extends2 = {}, _extends2[action.key] = _extends({}, action.payload || {}, action.event && {\n        event: action.event\n      }), _extends2));\n    } else {\n      for (var _len = arguments.length, other = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        other[_key - 2] = arguments[_key];\n      }\n      return reducer.apply(void 0, [state, action].concat(other));\n    }\n  };\n};\nvar useInstance = function useInstance(instance) {\n  var currentState = useSelector(function (state) {\n    var _state$instance$reduc;\n    return state === null || state === void 0 ? void 0 : (_state$instance$reduc = state[instance.reducer]) === null || _state$instance$reduc === void 0 ? void 0 : _state$instance$reduc[instance.reduxKey];\n  });\n  var memoedState = useMemo(function () {\n    var state = currentState || instance.defaultState;\n    state = JSON.parse(JSON.stringify(state));\n    return state;\n  }, [currentState]);\n  return memoedState;\n};\nvar useAIEventHandler = function useAIEventHandler(instance, events) {\n  var isComponentLoaded = useRef(false);\n  var state = useInstance(instance);\n  useEffect(function () {\n    if (isComponentLoaded.current) {\n      if (state.loading === true && state.event === 'start') {\n        events.onStart && events.onStart(state);\n      }\n      if (state.loading === false && state.data && state.event === 'success') {\n        events.onSuccess && events.onSuccess(state);\n      }\n      if (state.loading === false && state.error && state.event === 'error') {\n        events.onError && events.onError(state);\n      }\n      if (state.loading === false && state.event === 'update') {\n        events.onUpdate && events.onUpdate(state);\n      }\n      if (state.loading === false && state.event === 'delete') {\n        events.onUpdate && events.onUpdate(state);\n      }\n    }\n    if (!isComponentLoaded.current) {\n      isComponentLoaded.current = true;\n    }\n  }, [state]);\n  return null;\n};\nexport { API_INSTANCE, CreateBase, bindReducer, generateDynamicEndpoint, removeDuplicateFromArray, removeRecordsFromArray, useAIEventHandler, useInstance };","map":{"version":3,"mappings":"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","names":["generateDynamicEndpoint","url","variables","Object","keys","map","i","replace","defaultHttpFn","endpoint","method","params","headers","other","parseMethod","toLowerCase","urlParams","URLSearchParams","toString","window","fetch","body","then","res","json","data","status","makeHttpCall","context","httpFn","CreateBase","store","baseApiUrl","middleware","reducer","defaultState","validateHttpResponse","dispatch","_proto","createInstance","API_INSTANCE","createListInstance","LISTING_API_INSTANCE","listPath","reduxKey","action","key","onSuccess","onError","generateActions","apiMethod","_proto2","ac","actions","start","success","update","error","getCurrentState","state","getState","_this$store$getState","_this$store$getState$","JSON","parse","stringify","dispatchErrorEvent","response","apiState","onErrorResponse","cbPayload","undefined","loading","event","_this$middleware","_this$middleware2","currentState","instance","type","payload","call","_this2","refetch","startActionPayload","_this$middleware3","beforeStart","getMergedEndpoint","apiPromise","_ref3$status","isValidResponse","_this","cbValidateResponse","onSuccessResult","newPayload","_this$middleware4","afterSuccess","_this$middleware5","refetchAction","getValueFromPath","path","a","split","n","length","k","setValueFromPath","value","o","shift","removeRecordsFromArray","arr","deleteArr","options","callback","deletedFullArray","filter","item","id","includes","push","result","deleted","deletedItems","removeDuplicateFromArray","array","_options$excludeSecon","excludeSecond","newList","duplicates","forEach","values","_inheritsLoose","_this3","_proto3","updateAction","listFromPath","pathValue","Array","isArray","Error","list","_this$middleware6","afterUpdate","updateData","showErrorMessage","deleteAction","deleteData","_this4","_this$middleware7","afterDelete","message","console","log","bindReducer","config","useInstance","useSelector","_state$instance$reduc","memoedState","useMemo","useAIEventHandler","events","isComponentLoaded","useRef","useEffect","current","onStart","onUpdate"],"sources":["C:\\Users\\HP\\Downloads\\frontend\\frontend\\node_modules\\easy-redux-http-call\\src\\index.tsx"],"sourcesContent":["import { useEffect, useMemo, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Store } from 'redux'\n\n/** All the method for HTTP request */\ntype IHttpMethods = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\n/** All the HTTP method props */\ninterface IHttpFuncProps {\n  /** Endpoint of you API */\n  endpoint: string\n  /** Method for your API */\n  method: IHttpMethods\n  /** Body params for API */\n  params: any\n  /** Headers for API */\n  headers: any\n}\n\n/*\n * @param {String} url\n * @param {variable} variables\n * @returns {string} updated url\n * this method take url and replace inner url with giving variable object\n */\nconst generateDynamicEndpoint = (url: string, variables: any) => {\n  Object.keys(variables || {}).map((i) => {\n    url = url.replace(`{${i}}`, variables[i])\n  })\n\n  return url\n}\n\n/**\n * @param {object}\n * @returns function call api and return promise. once this promise fullfil it will return data\n */\nconst defaultHttpFn = ({\n  endpoint,\n  method,\n  params,\n  headers,\n  ...other\n}: IHttpFuncProps) => {\n  const parseMethod: string = (method || 'get').toLowerCase()\n\n  if (parseMethod === 'get' && typeof params === 'object') {\n    const urlParams = new URLSearchParams(params)\n    endpoint += `?${urlParams.toString()}`\n  }\n\n  return window\n    .fetch(endpoint, {\n      method: parseMethod,\n      headers: headers || {},\n      ...(parseMethod !== 'get' && {\n        body: params || {}\n      }),\n      ...(other || {})\n    })\n    .then(async (res) => {\n      const data = await res.json()\n\n      return {\n        status: res.status,\n        data: data\n      }\n    })\n}\n\n/** Check if any httpFn Defined by user then use that other wise use defaultHttpFn */\nconst makeHttpCall = (context: any, params: any) => {\n  if (context.httpFn) {\n    return context.httpFn(params)\n  } else {\n    return defaultHttpFn(params)\n  }\n}\n\n/** Interface used for all the allowed props used to generate base instance */\ninterface ICreateBase {\n  /** Redux store of your project */\n  store: Store\n  /** Base endpoint url of your backend */\n  baseApiUrl: string\n  /** Redux Dispatch */\n  dispatch: Function\n  /** Custom httpFn: Used when you make http request */\n  httpFn: Function\n  /** Middleware functions: executed before/after of every HTTP request. */\n  middleware: any\n  /** Name of your redux where you wanted to save data.\n   * Can be update later for different HTTP Request.\n   */\n  reducer: 'string'\n  /** Default state for your HTTP Request.\n   * Can be update later for different HTTP Request.\n   */\n  defaultState: any\n\n  /** Function used to validate the http response. */\n  validateHttpResponse: Function\n}\n\n/** Interface used for all the allowed props used to generate api instance */\ninterface IApiInstance extends ICreateBase {\n  /** Endpoint of your HTTP Request */\n  endpoint: string\n  /** Redux name where you want to save result of HTTP Request. */\n  reduxKey: string\n  /**\n   * Different version of action generated automatically.\n   */\n  action: string\n  /** Unique key from your record\n   * can be 'id' or 'parent.child.sub-child' or 'parent[0].child.sub-child'\n   */\n  key: string\n  /** HTTP Request Method\n   * GET | Post | PUT | DELETE\n   */\n  method: IHttpMethods\n  /** Callback function executed when HTTP Request Succeed. */\n  onSuccess: Function\n\n  /** Callback function executed when HTTP Request Failed. */\n  onError: Function\n}\n\ninterface IApiListInstance extends IApiInstance {\n  /**\n   * path to your list\n   */\n  listPath: string\n}\n\n/** Interface for middleware function */\ninterface IMiddleware {\n  /** Callback function executed before HTTP Request happens\n   * return result will be passed and saved to redux\n   */\n  beforeStart?: Function\n  /** Callback function executed only success of HTTP Request\n   * return result will be passed and saved to redux\n   */\n  afterSuccess?: Function\n\n  onError?: Function\n\n  afterUpdate?: Function\n\n  afterDelete?: Function\n}\n\n/** CreateBase is used to generate Base Instance */\nclass CreateBase {\n  store: any\n  dispatch: Function\n  baseApiUrl: string\n  httpFn: Function\n  middleware: IMiddleware\n  reducer: string\n  defaultState: any\n  validateHttpResponse: Function\n  other: any\n\n  constructor(data: ICreateBase) {\n    const {\n      store,\n      baseApiUrl,\n      httpFn,\n      middleware,\n      reducer,\n      defaultState,\n      validateHttpResponse,\n      ...other\n    } = data\n    this.store = store\n    this.dispatch = store.dispatch\n    this.baseApiUrl = baseApiUrl || ''\n    this.httpFn = httpFn\n    this.middleware = middleware\n    this.reducer = reducer\n    this.defaultState = defaultState\n    this.validateHttpResponse = validateHttpResponse\n    this.other = other\n  }\n\n  /** Used to create HTTP instance from the Base instance */\n  createInstance(data: IApiInstance) {\n    return new API_INSTANCE({\n      ...this.other,\n      ...data,\n      store: data.store || this.store,\n      dispatch: data.dispatch || this.dispatch,\n      baseApiUrl: data.baseApiUrl || this.baseApiUrl || '',\n      httpFn: data.httpFn || this.httpFn,\n      defaultState: data.defaultState || this.defaultState,\n      validateHttpResponse:\n        data.validateHttpResponse || this.validateHttpResponse\n    })\n  }\n\n  /** Used to create Listing HTTP instance from the Base instance */\n  createListInstance(data: IApiListInstance) {\n    return new LISTING_API_INSTANCE({\n      ...this.other,\n      ...data,\n      store: data.store || this.store,\n      dispatch: data.dispatch || this.dispatch,\n      baseApiUrl: data.baseApiUrl || this.baseApiUrl || '',\n      httpFn: data.httpFn || this.httpFn,\n      defaultState: data.defaultState || this.defaultState,\n      validateHttpResponse:\n        data.validateHttpResponse || this.validateHttpResponse,\n      listPath: data.listPath\n    })\n  }\n}\n\ninterface IReduxActions {\n  /** <reducerName>_DEFAULT_<yourReduxKey> */\n  default: string\n  /** <reducerName>_START_<yourReduxKey> */\n  start: string\n  /** <reducerName>_SUCCESS_<yourReduxKey> */\n  success: string\n  /** <reducerName>_UPDATE_<yourReduxKey> */\n  update: string\n  /** <reducerName>_DELETE_<yourReduxKey> */\n  delete: string\n  /** <reducerName>_ERROR_<yourReduxKey> */\n  error: string\n}\n\ninterface IOtherProps {\n  /** Used to refetch data even changing loading to true. */\n  refetch?: Boolean\n  /** Used to pass Body of HTTP request. */\n  params?: any\n  /** Used to replace dynamic portion of api endpoint\n   * /api/v2/user/:id\n   * in above \":id\" will be replaced with value of id key from the urlParams object.\n   */\n  urlParams?: any\n\n  /**\n   * HTTP Header\n   */\n  headers?: any\n}\n\n/** Class used to create HTTP method */\nclass API_INSTANCE {\n  store: any\n  dispatch: Function\n  baseApiUrl: string\n  httpFn: Function\n  middleware: IMiddleware\n  reducer: string\n  defaultState: any\n  other: IOtherProps\n  reduxKey: string\n  actions: IReduxActions\n  endpoint: string\n  key: string\n  apiMethod: IHttpMethods\n  onSuccess: Function\n  state: any\n  validateHttpResponse: Function\n  onError: any\n\n  /** Generate dynamic action with combination of different situation. */\n  generateActions(ac: string, reducer: string) {\n    this.actions = {\n      default: `${reducer}_default_` + ac,\n      start: `${reducer}_START_` + ac,\n      success: `${reducer}_SUCCESS_` + ac,\n      update: `${reducer}_UPDATE_` + ac,\n      delete: `${reducer}_DELETE_` + ac,\n      error: `${reducer}_ERROR_` + ac\n    }\n  }\n\n  /** Used to get current redux state from the store. */\n  getCurrentState() {\n    const state = this.store.getState()?.[this.reducer]?.[this.reduxKey]\n\n    if (state) {\n      return JSON.parse(JSON.stringify(state))\n    }\n\n    return state\n  }\n\n  constructor({\n    endpoint,\n    reduxKey,\n    action,\n    key,\n    method,\n    onSuccess,\n    onError,\n    store,\n    dispatch,\n    baseApiUrl,\n    httpFn,\n    defaultState,\n    middleware,\n    reducer,\n    validateHttpResponse\n  }: IApiInstance) {\n    this.store = store\n    this.dispatch = dispatch\n    this.baseApiUrl = baseApiUrl\n    this.httpFn = httpFn\n    this.defaultState = defaultState\n    this.middleware = middleware\n    this.reducer = reducer\n    this.generateActions(action, reducer)\n    this.reduxKey = reduxKey\n    this.endpoint = endpoint\n    this.key = key\n    this.apiMethod = method || 'GET'\n    this.onSuccess = onSuccess\n    this.onError = onError\n    this.validateHttpResponse = validateHttpResponse\n  }\n\n  dispatchErrorEvent(response: any, apiState: any = {}): any {\n    let onErrorResponse = response\n    if (typeof this.onError === 'function') {\n      const cbPayload = this.onError(response, apiState)\n      if (cbPayload !== undefined) {\n        onErrorResponse = cbPayload\n      }\n    }\n\n    onErrorResponse = {\n      loading: false,\n      error: onErrorResponse,\n      event: 'error'\n    }\n\n    if (typeof this?.middleware?.onError === 'function') {\n      const cbPayload: any = this.middleware?.onError(\n        {\n          currentState: this.getCurrentState(),\n          instance: this,\n          response: onErrorResponse,\n          event: 'error'\n        },\n        apiState\n      )\n      if (cbPayload !== undefined) {\n        onErrorResponse = cbPayload\n      }\n    }\n\n    this.dispatch({\n      type: this.actions.error,\n      key: this.reduxKey || 'unknown',\n      payload: onErrorResponse,\n      event: 'error'\n    })\n    return onErrorResponse\n  }\n\n  /** Used to fire HTTP request. */\n  call(\n    other: IOtherProps = {\n      refetch: false,\n      params: {},\n      urlParams: {},\n      headers: {}\n    }\n  ) {\n    let startActionPayload = {\n      ...this.getCurrentState(),\n      ...(!other.refetch && {\n        loading: true\n      }),\n      error: {},\n      event: 'start'\n    }\n\n    if (typeof this?.middleware?.beforeStart === 'function') {\n      startActionPayload = this.middleware.beforeStart(\n        {\n          currentState: this.getCurrentState(),\n          instance: this,\n          params: other.params,\n          urlParams: other.urlParams,\n          event: 'start'\n        },\n        other\n      )\n    }\n\n    this.dispatch({\n      type: this.actions.start,\n      key: this.reduxKey || '',\n      payload: startActionPayload,\n      event: 'start'\n    })\n\n    try {\n      const apiState = {\n        endpoint: generateDynamicEndpoint(\n          getMergedEndpoint(this.baseApiUrl, this.endpoint),\n          other.urlParams || {}\n        ),\n        method: this.apiMethod,\n        headers: other.headers,\n        ...(other.params && {\n          params: other.params\n        })\n      }\n\n      const apiPromise = makeHttpCall(this, apiState)\n\n      apiPromise\n        .then(async ({ data: response, status = 200 }: any) => {\n          let isValidResponse = true\n          if (this.validateHttpResponse) {\n            const cbValidateResponse = this.validateHttpResponse(response)\n            if (!cbValidateResponse) {\n              isValidResponse = false\n            }\n          } else if (status > 299) {\n            isValidResponse = false\n            return response\n          }\n\n          if (!isValidResponse) {\n            return this.dispatchErrorEvent(response, other)\n          }\n\n          if (typeof this.onSuccess === 'function') {\n            const onSuccessResult = this.onSuccess(response, {\n              ...apiState,\n              ...other\n            })\n            if (onSuccessResult !== undefined) {\n              response = onSuccessResult\n            }\n          }\n\n          let newPayload = {\n            ...this.getCurrentState(),\n            loading: false,\n            data: response,\n            event: 'success'\n          }\n\n          if (typeof this?.middleware?.afterSuccess === 'function') {\n            const cbPayload = this.middleware?.afterSuccess(\n              {\n                currentState: this.getCurrentState(),\n                instance: this,\n                response: response,\n                event: 'success'\n              },\n              {\n                ...apiState,\n                ...other\n              }\n            )\n            if (cbPayload !== undefined) {\n              newPayload = cbPayload\n            }\n          }\n\n          this.dispatch({\n            type: this.actions.success,\n            key: this.reduxKey || 'unknown',\n            payload: newPayload,\n            event: 'success'\n          })\n          return response\n        })\n        .catch((error: any) => {\n          return this.dispatchErrorEvent(error, {\n            ...other,\n            ...apiState\n          })\n        })\n    } catch (error) {\n      return this.dispatchErrorEvent(error, {\n        ...other\n      })\n    }\n  }\n\n  /** Used to refetch data without making loading flags to true. */\n  refetchAction(other = {}) {\n    this.call({ ...other, refetch: true })\n  }\n}\n\n/** Used to extract value from the object or array or any complex variable\n * path can be 'id' or 'parent.child.sub-child' or 'parent[0].child.sub-child'\n */\nconst getValueFromPath = (data: any, path: string): string | undefined => {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1') // convert indexes to properties\n  path = path.replace(/^\\./, '') // strip a leading dot\n  var a = path.split('.')\n  for (var i = 0, n = a.length; i < n; ++i) {\n    var k = a[i]\n    if (k in data) {\n      data = data[k]\n    } else {\n      return undefined\n    }\n  }\n  return data\n}\n\nconst setValueFromPath = (data: any, path: string, value: any) => {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1') // convert indexes to properties\n  path = path.replace(/^\\./, '') // strip a leading dot\n\n  var a = path.split('.')\n  var o = data\n  while (a.length - 1) {\n    var n: any = a.shift()\n    if (!(n in o)) o[n] = {}\n    o = o[n]\n  }\n  o[a[0]] = value\n}\n\n/** It merges the baseApiUrl with current endpoint path */\nconst getMergedEndpoint = (baseApiUrl: string, endpoint: string) => {\n  if (!baseApiUrl) return endpoint\n\n  if (endpoint[0] === '/') {\n    return baseApiUrl + endpoint\n  }\n\n  return endpoint\n}\n\n/**\n *\n * @param {Array} arr\n * @param {Array} deleteArr\n * @param {Object} options\n * @returns will remove record from the arr based on values of deleteArr based on key or callback passed in options\n */\nconst removeRecordsFromArray = (\n  arr: any = [],\n  deleteArr: any,\n  options: { key?: string; callback: Function }\n) => {\n  const { key = '', callback } = options\n  const deletedFullArray: any = []\n\n  arr = arr.filter((item: any) => {\n    const id = callback ? callback(item) : item[key]\n    if (deleteArr.includes(id)) {\n      deletedFullArray.push(item)\n      return false\n    } else {\n      return true\n    }\n  })\n\n  return {\n    result: arr,\n    deleted: deletedFullArray.length,\n    deletedItems: deletedFullArray\n  }\n}\n\n/**\n *\n * @param {Array} array\n * @param {Object} options\n * @returns used to removing duplicate items from array based on key or callback passed in options,\n */\nconst removeDuplicateFromArray = (\n  array: Array<object>,\n  options: { key?: string; callback?: Function; excludeSecond?: Boolean }\n) => {\n  const { key, callback, excludeSecond = false } = options\n  const newList = {}\n  let duplicates = 0\n\n  array.forEach((item) => {\n    let id = callback ? callback(item) : key ? item[key] : ''\n    id = id + 'p'\n    if (newList[id]) {\n      duplicates++\n      if (excludeSecond === false) {\n        newList[id] = item\n      }\n    } else {\n      newList[id] = item\n    }\n  })\n\n  return { result: Object.values(newList || {}), duplicates: duplicates }\n}\n\n/** It contain all the feature from API_INSTANCE with additional method to delete and update records from the list in redux. */\nclass LISTING_API_INSTANCE extends API_INSTANCE {\n  listPath: string\n\n  constructor(data: IApiListInstance) {\n    super(data)\n    this.listPath = data.listPath\n  }\n\n  updateAction(data: Array<any> | any) {\n    try {\n      let state = this.getCurrentState()\n\n      let listFromPath: any = []\n      if (this.listPath) {\n        const pathValue = getValueFromPath(state, this.listPath)\n        if (!listFromPath) {\n          listFromPath = []\n        } else if (!Array.isArray(pathValue)) {\n          throw new Error('listPath should be path to array state')\n        } else {\n          listFromPath = pathValue\n        }\n      } else if (!Array.isArray(state.data)) {\n        throw new Error(\n          'data should be array state. if your list is not in data state then you need to pass listPath in instance'\n        )\n      }\n\n      const list = [\n        ...(this.listPath ? getValueFromPath(state, this.listPath) : state.data)\n      ]\n\n      const result = removeDuplicateFromArray(\n        [...list, ...(Array.isArray(data) ? data : [data])],\n        {\n          key: this.key\n        }\n      )\n\n      if (typeof this?.middleware?.afterUpdate === 'function') {\n        state = this.middleware.afterUpdate({\n          currentState: this.getCurrentState(),\n          instance: this,\n          updateData: result\n        })\n      } else if (this.listPath) {\n        setValueFromPath(\n          state,\n          this.listPath,\n          Object.values(result.result || {})\n        )\n      } else {\n        state.data = Object.values(result.result || {})\n      }\n\n      this.dispatch({\n        type: this.actions.update,\n        key: this.reduxKey,\n        payload: {\n          ...this.getCurrentState(),\n          ...state,\n          event: 'update'\n        },\n        event: 'update'\n      })\n    } catch (error) {\n      showErrorMessage(error)\n    }\n  }\n\n  deleteAction(id: string[] | string | number) {\n    try {\n      let state = this.getCurrentState()\n\n      let listFromPath: any = []\n      if (this.listPath) {\n        const pathValue = getValueFromPath(state, this.listPath)\n        if (!listFromPath) {\n          listFromPath = []\n        } else if (!Array.isArray(pathValue)) {\n          throw new Error('listPath should be path to array state')\n        } else {\n          listFromPath = pathValue\n        }\n      } else if (!Array.isArray(state.data)) {\n        throw new Error(\n          'data should be array state. if your list is not in data state then you need to pass listPath in instance'\n        )\n      }\n\n      const list = [\n        ...(this.listPath ? getValueFromPath(state, this.listPath) : state.data)\n      ]\n\n      const deleteData = removeRecordsFromArray(\n        list,\n        Array.isArray(id) ? id : [id],\n        {\n          callback: (i: any) => getValueFromPath(i, this.key || '')\n        }\n      )\n\n      if (typeof this?.middleware?.afterDelete === 'function') {\n        state = this.middleware.afterDelete({\n          currentState: this.getCurrentState(),\n          instance: this,\n          deleteData: deleteData\n        })\n      } else if (this.listPath) {\n        setValueFromPath(state, this.listPath, deleteData.result)\n      } else {\n        state.data = deleteData.result\n      }\n\n      this.dispatch({\n        type: this.actions.delete,\n        key: this.reduxKey,\n        payload: {\n          ...this.getCurrentState(),\n          ...state,\n          event: 'delete'\n        },\n        event: 'delete'\n      })\n    } catch (error) {\n      showErrorMessage(error)\n    }\n  }\n}\n\nconst showErrorMessage = (message: Error) => {\n  console.log(\n    `%c ${message.message} `,\n    ' font-size: 12px; color: #bada55; background: #222;',\n    message\n  )\n}\n\n/** This method is used to register dynamic action which is being call from all the instances. */\nconst bindReducer = (\n  reducer: (state: any, action: 'string', ...other: any[]) => {},\n  config: { key: '' }\n): any => {\n  const path = config.key + '_'\n\n  return (state: any, action: any, ...other: any) => {\n    if (action.type.includes(path)) {\n      return {\n        ...state,\n        [action.key]: {\n          ...(action.payload || {}),\n          ...(action.event && {\n            event: action.event\n          })\n        }\n      }\n    } else {\n      return reducer(state, action, ...other)\n    }\n  }\n}\n\n/** Used to get current state of the HTTP request where detail will be store */\nconst useInstance = (instance: IApiInstance): any => {\n  const currentState = useSelector(\n    (state: any) => state?.[instance.reducer]?.[instance.reduxKey]\n  )\n\n  const memoedState = useMemo(() => {\n    let state = currentState || instance.defaultState\n    state = JSON.parse(JSON.stringify(state))\n    return state\n  }, [currentState])\n\n  return memoedState\n}\n\n// ## useInstance\n\n// use useInstance hook which help you get easily fetch state of current HTTP request. you don't have to make any configuation.\n\n// ```\n// const reduxState = useInstance(httpInstance);\n// ```\n// reduxState contain value of given(httpInstance) instance state from the redux.\n\ninterface IAIEvents {\n  onStart?: Function\n  onSuccess?: Function\n  onError?: Function\n  onUpdate?: Function\n  onDelete?: Function\n}\n\nconst useAIEventHandler = (instance: IApiInstance, events: IAIEvents) => {\n  const isComponentLoaded = useRef(false)\n\n  // const\n  const state = useInstance(instance)\n\n  useEffect(() => {\n    if (isComponentLoaded.current) {\n      if (state.loading === true && state.event === 'start') {\n        events.onStart && events.onStart(state)\n      }\n      if (state.loading === false && state.data && state.event === 'success') {\n        events.onSuccess && events.onSuccess(state)\n      }\n      if (state.loading === false && state.error && state.event === 'error') {\n        events.onError && events.onError(state)\n      }\n      if (state.loading === false && state.event === 'update') {\n        events.onUpdate && events.onUpdate(state)\n      }\n      if (state.loading === false && state.event === 'delete') {\n        events.onUpdate && events.onUpdate(state)\n      }\n    }\n    if (!isComponentLoaded.current) {\n      isComponentLoaded.current = true\n    }\n  }, [state])\n\n  return null\n}\n\nexport {\n  CreateBase,\n  API_INSTANCE,\n  generateDynamicEndpoint,\n  removeRecordsFromArray,\n  removeDuplicateFromArray,\n  bindReducer,\n  useInstance,\n  useAIEventHandler\n}\n\n// let state = AI_getCompanyList.store.getState()?.[AI_getCompanyList.reducer]?.[AI_getCompanyList.reduxKey]\n\n// const removeDuplicateFromArray = (array, options) => {\n//   const { key, callback, excludeSecond = false } = options\n//   const newList = {}\n//   let duplicates = 0\n\n//   array.forEach(item => {\n//     let id = callback ? callback(item) : key ? item[key] : \"\"\n//     id = id + \"p\"\n//     if (newList[id]) {\n//       duplicates++\n//       if (excludeSecond === false) {\n//         newList[id] = item\n//       }\n//     } else {\n//       newList[id] = item\n//     }\n//   })\n\n//   return { result: Object.values(newList || {}), duplicates: duplicates }\n// }\n\n// const getValueFromPath = (data, path) => {\n//   path = path.replace(/\\[(\\w+)\\]/g, \".$1\") // convert indexes to properties\n//   path = path.replace(/^\\./, \"\") // strip a leading dot\n//   var a = path.split(\".\")\n//   for (var i = 0, n = a.length; i < n; ++i) {\n//     var k = a[i]\n//     if (k in data) {\n//       data = data[k]\n//     } else {\n//       return \"\"\n//     }\n//   }\n//   return data\n// }\n\n// const setValueFromPath = (data, path, value) => {\n//   path = path.replace(/\\[(\\w+)\\]/g, \".$1\") // convert indexes to properties\n//   path = path.replace(/^\\./, \"\") // strip a leading dot\n\n//   var a = path.split(\".\")\n//   var o = data\n//   while (a.length - 1) {\n//     var n = a.shift()\n//     if (!(n in o)) o[n] = {}\n//     o = o[n]\n//   }\n//   o[a[0]] = value\n// }\n\n// let listPath = \"data.rows\"\n\n// let list = getValueFromPath(AI_getCompanyList.getCurrentState(), listPath)\n\n// let data = {\n//     \"location_name\": [\n//         \"asdfas1sdf\"\n//     ],\n//     \"id\": 2356,\n//     \"company_name\": \"asdfasdf\",\n//     \"updatedAt\": \"2023-05-01T09:50:36.147Z\",\n//     \"createdAt\": \"2023-05-01T09:50:36.147Z\"\n// }\n\n// const result = removeDuplicateFromArray(\n//   [...list, ...(Array.isArray(data) ? data : [data])],\n//   {\n//     key: \"id\"\n//   }\n// )\n\n// setValueFromPath(\n//   state,\n//   listPath,\n//   Object.values(result.result || {})\n// )\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}